# criacao de secret
kind: Secret
apiVersion: v1
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
    template.openshift.io/expose-database_name: '{.data[''database-name'']}'
    template.openshift.io/expose-password: '{.data[''database-password'']}'
    template.openshift.io/expose-username: '{.data[''database-user'']}'
  selfLink: /api/v1/namespaces/fiap-aso-grupo14/secrets/sample-database
  name: sample-database  
  namespace: fiap-aso-grupo14
  labels:
    app: sample-database
    app.kubernetes.io/component: sample-database
    app.kubernetes.io/instance: sample-database
    template: postgresql-persistent-template
data:
  database-name: c2FtcGxlZGI=
  database-password: c2FtcGxlZGI=
  database-user: c2FtcGxlZGI=
type: Opaque
---
# criacao do service
kind: Service
apiVersion: v1
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
  selfLink: /api/v1/namespaces/fiap-aso-grupo14/services/sample-database
  name: sample-database
  namespace: fiap-aso-grupo14
  labels:
    app: sample-database
    app.kubernetes.io/component: sample-database
    app.kubernetes.io/instance: sample-database
    template: postgresql-persistent-template
spec:
  ports:
    - name: postgresql
      protocol: TCP
      port: 5432
  selector:
    name: sample-database
  type: LoadBalancer
  sessionAffinity: None
status:
  loadBalancer: {}
---
# criacao do PersistentVolumeClaim
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
    pv.kubernetes.io/bound-by-controller: 'yes'
    volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/cinder
  selfLink: /api/v1/namespaces/fiap-aso-grupo14/persistentvolumeclaims/sample-database
  name: sample-database
  namespace: fiap-aso-grupo14
  labels:
    app: sample-database
    app.kubernetes.io/component: sample-database
    app.kubernetes.io/instance: sample-database
    template: postgresql-persistent-template
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
---
# criacao do deploymentconfig
kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
    template.alpha.openshift.io/wait-for-ready: 'true'
  selfLink: >-
    /apis/apps.openshift.io/v1/namespaces/fiap-aso-grupo14/deploymentconfigs/sample-database
  name: sample-database
  generation: 2
  namespace: fiap-aso-grupo14
  labels:
    app: sample-database
    app.kubernetes.io/component: sample-database
    app.kubernetes.io/instance: sample-database
    template: postgresql-persistent-template
spec:
  strategy:
    type: Recreate
    recreateParams:
      timeoutSeconds: 600
    resources: {}
    activeDeadlineSeconds: 21600
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - postgresql
        from:
          kind: ImageStreamTag
          namespace: openshift
          name: 'postgresql:10'
        lastTriggeredImage: postgres:10
    - type: ConfigChange
  replicas: 1
  revisionHistoryLimit: 10
  test: false
  selector:
    name: sample-database
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: sample-database
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
    spec:
      volumes:
        - name: sample-database-data
          persistentVolumeClaim:
            claimName: sample-database
      containers:
        - resources:
            limits:
              memory: 512Mi
          readinessProbe:
            exec:
              command:
                - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: postgresql
          livenessProbe:
            exec:
              command:
                - /usr/libexec/check-container
                - '--live'
            initialDelaySeconds: 120
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: sample-database
                  key: database-user
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sample-database
                  key: database-password
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: sample-database
                  key: database-name
          securityContext:
            capabilities: {}
            privileged: false
          ports:
            - containerPort: 5432
              protocol: TCP
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: sample-database-data
              mountPath: /var/lib/pgsql/data
          terminationMessagePolicy: File
          image: postgres:10
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
